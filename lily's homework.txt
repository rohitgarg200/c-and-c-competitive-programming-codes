#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);
bool max1(const pair<int,int> &a,  
               const pair<int,int> &b) 
{ 
       return (a.first > b.first); 
}

// Complete the lilysHomework function below.
int lilysHomework(vector<int> arr) {
    int n=arr.size();
    pair<int,int> ar[n];
    for(int i=0;i<arr.size();i++){
        ar[i].first=arr[i];
        ar[i].second=i;
    }
    sort(ar,ar+n);
    int ans=0;
    vector<bool> vis(n,false);
    for(int i=0;i<n;i++){
        if(vis[i] || ar[i].second==i ){
            continue;
        }
        int j=i;
        int cycle=0;
        while(!vis[j]){
            vis[j]=1;
            j=ar[j].second;
            cycle++;




        }
        if(cycle>0){
            ans=ans+cycle-1;
        }
    }
    sort(ar,ar+n,max1);
    vector<bool> vis1(n,false);
    int ans1=0;
    for(int i=0;i<n;i++){
        if(vis1[i] || ar[i].second==i ){
            continue;
        }
        int j=i;
        int cycle=0;
        while(!vis1[j]){
            vis1[j]=1;
            j=ar[j].second;
            cycle++;




        }
        if(cycle>0){
            ans1=ans1+cycle-1;
        }
    }

ans=min(ans,ans1);
return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    int result = lilysHomework(arr);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
