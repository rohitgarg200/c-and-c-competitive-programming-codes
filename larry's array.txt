#include <bits/stdc++.h>


using namespace std;

vector<string> split_string(string);

// Complete the larrysArray function below.
string larrysArray(vector<int> a)
{ //VERY GOOD APPROACH AS COUNT NUMBER OF INVERSIONS IF INVERSIONS ARE EVEN THEN WE CAN SORT IF NO OF INVERSIONS ARE ODD THAN RETURN NO
     int l=a.size();
     long long int ret1=0;

     for(int i=0;i<l-1;i++){
         for(int j=i+1;j<l;j++){
             if(a[i]>a[j]){
                 ret1++;
             }
         }
     }
     return ret1%2==0?"YES":"NO";
}
// MY OTHER APPROACHES IN WHICH I DO SWAPING OF ELEMENTS ;
/*
    for(int i=0;i<a.size();i++)
    {
        
        int small=i,j=0;
        while(a[small]!=(i+1) && small<a.size()){
            small++;
        }
        while(small>i){
              int temp;
              if((small-2)>=i){
            temp=a[small-2];
            a[small-2]=a[small-1];
            a[small-1]=a[small];
            a[small]=temp;
            small--;

            
        }
        else {
            int temp=a[small];
            a[small]=a[small+1];
            a[small+1]=a[small-1];
            a[small-1]=temp;
            small--;


        }
        }
        
        }*//*
     
        if(small>a[i])
        {
            small=a[i];
            j=1;
        }
        if(small>a[i+1])
        {
            small=a[i+1];
            j=2;
        }
        if(small>a[i+2])
        {
            small=a[i+2];
            j=3;
        }
        for(int k=1;k<j;k++)
        {
            int temp;
            temp=a[i];
            a[i]=a[i+1];
            a[i+1]=a[i+2];
            a[i+2]=temp;
        } 
    }  
        for(int i=0;i<l-1;i++)
        {cout<<a[i]<<" ";
            if(a[i]>a[i+1])
            {
                return "NO";
            }
        }
      return "YES";

    }*/

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string A_temp_temp;
        getline(cin, A_temp_temp);

        vector<string> A_temp = split_string(A_temp_temp);

        vector<int> A(n);

        for (int i = 0; i < n; i++) {
            int A_item = stoi(A_temp[i]);

            A[i] = A_item;
        }

        string result = larrysArray(A);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
