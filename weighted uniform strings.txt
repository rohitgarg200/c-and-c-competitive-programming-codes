#include <bits/stdc++.h>
#include<algorithm>
using namespace std;

// Complete the weightedUniformStrings function below.
vector<string> weightedUniformStrings(string s, vector< int> queries) {
      int  a[26]={0};
    vector< bool> data(10000001);
    vector<string> ret;
    char prev=s[0];
    data[s[0]-'a'+1]=1;
    int value=s[0]-'a'+1;
    for( int i=1;i<s.size();i++){
        a[s[i]-'a']++;
        if(s[i]==prev){
            data[value+s[i]-'a'+1]='1';
            value=value+s[i]-'a'+1;

        }else{
            data[((a[s[i]-'a'])*(s[i]-'a'+1))]='1';
            prev=s[i];
            value=s[i]-'a'+1;

        }
        
        
}
    for( int i=0;i<queries.size();i++){


        if(data[queries[i]]){
            ret.push_back("Yes");

        }
        else {
            ret.push_back("No");
    }
    }
return ret;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    int queries_count;
    cin >> queries_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        int queries_item;
        cin >> queries_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        queries[i] = queries_item;
    }

    vector<string> result = weightedUniformStrings(s, queries);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}
