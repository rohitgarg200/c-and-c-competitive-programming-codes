#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the almostSorted function below.
void almostSorted(vector<int> arr)
 {
     int index;
     int che=0;
    for(int i=0;i<arr.size()-1;i++){
        if(arr[i]>arr[i+1]){
            index=i;
            che++;
            break;
        }

    }
    if(!che){
        cout<<"yes"<<endl;
    }
    int index1;
for(int i=index+1;i<arr.size();i++){
    if(arr[index]<arr[i]){
        index1=i-1;
        break;
    }

}
swap(arr[index],arr[index1]);
int check=0;
for(int i=0;i<arr.size()-1;i++){
    
    if(arr[i]>arr[i+1]){
        check++;
    }
}
if(!check){
    cout<<"yes"<<endl;
    cout<<"swap "<<index+1<<" "<<index1+1;
    return;
}
swap(arr[index],arr[index1]);
for(int i=0;i<=(index1-index)/2;i++){
    swap(arr[index+i],arr[index1-i]);

}
int check1 = 0;
for (int i = 0; i < arr.size() - 1; i++) {
  if (arr[i] > arr[i + 1]) {
    check1++;
  }
}
if(!check1){
  cout << "yes"<<endl;
  cout << "reverse " << index + 1 << " " << index1 + 1<<endl;
  return;
}
cout<<"no"<<endl;
}

int main()
{
    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    almostSorted(arr);

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
