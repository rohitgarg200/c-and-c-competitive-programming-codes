#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the highestValuePalindrome function below.
string highestValuePalindrome(string s, long long int n, long long int k) {
   long long int change=0;
   cout<<n<<endl<<k;
   int i=0;
   vector<int> t((n+1)/2,0);
while(change<=k && i<=n/2){
if(s[i]!=s[n-i-1]){
    change++;
    s[i]=max(s[i],s[n-i-1]);
    s[n-i-1]=s[i];
    t[i]++;
}
i++;

}
i=0;
cout<<s<<endl;
if(change>k){
    s="-1";
    return s;
}
while(change<k && i<=n/2){
    if(s[i]!='9' && t[i]!=0 ){
        s[i]='9';
        s[n-i-1]='9';
        change++;
    }
    else if(s[i]!='9' && t[i]==0 ){
        if(change+1<k){
        s[i]='9';
        s[n-i-1]='9';
        change=change+2;}
    
        else if(change+1<=k && i==n/2 && n%2==1 && t[i]==0){
            s[i]='9';
            change++;

           }       }

    i++;
    

}

return s;
}
// below logic gives wrong answer for 5 test cases;
/*


   long long int w=k;
   for(long long i=0;i<s.size();i++){
       if(s[i]=='9'){
           w++;
       }
   }
   if(w>=s.size()){
       for(long long int i=0;i<s.size();i++){
           s[i]='9';
       }
       return s;
   }
   string t=s;
   long long int y=0;
   long long int q=k;
   for(y=0;y<q && q<t.size();y++){
       if(t[y]=='9'){
           ;
       }
       else 
       {t[y]='9';
       q--;}
   }
   if(y==s.size()){
       return t;
   }
    vector<long long int> a((s.size()/2)+1,0);
    for(long long int i=0;i<s.size()/2;i++){
        if(s[i]!=s[s.size()-i-1]){
            change++;
            if(change>k){
                return "-1";
            }
            a[i]=1;
            if(s[i]>s[s.size()-i-1]){
            
                s[s.size()-i-1]=s[i];
            }
            else
            {
            s[i]=s[s.size()-i-1];
        }}
    }
    if(change>k){
        return "-1";
    }
    k=k-change;
    long long int i=0;
while(k!=0 && i<=s.size()/2){
if(a[i]==1 && s[i]!=9){
    s[i]='9';
    s[s.size()-i-1]='9';
    k--;
}
if(a[i]==0 && s[i]!='9' && k>1){
    s[i]='9';
    s[s.size()-1-i]='9';
    k=k-2;
}
if(i==s.size()/2 && s[i]!='9' && s.size()%2!=0 && k>0){
    s[i]='9';
    s[s.size()-i-1]='9';
    k--;
     break;
}
i++;
}

return s;


}*/

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string s;
    getline(cin, s);

    string result = highestValuePalindrome(s, n, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
