
#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);
int check(vector<int>&a,int left,int right,long long int lsum,long long int rsum){
    int left1=left;
    int right1=right;
    int count=-1;
if(left>=right){
    return 0;
}
if(left<0 || right<0 ||left>=a.size() || right>=a.size()){
    return 0;
}

    while(left<=right && left>=left1 && right<=right1){
        if(lsum<rsum ){
            lsum+=a[left];
            left++;
            count=0;
        }
        else{
            rsum+=a[right];
            right--;
            count=1;
        }
        
        
    }
    if(lsum==rsum){
        int y=0,y1=0;
        left--;
        right++;
        if(left>=left1)
          {  y=1+check(a,left1,left,0,0);}
        if(right<=right1){
            y1=1+check(a,right,right1,0,0);}
        return max(y,y1);
    }
return 0;



}

/*
 * Complete the arraySplitting function below.
 */
int arraySplitting(vector<int> arr) {
    int ret=0;
    for(int i=0;i<arr.size();i++){
        if(arr[i]==0){
            ret++;
        }
    }
    if(ret==arr.size()){
        return ret-1;
    }

return check(arr,0,arr.size()-1,0,0);

    /*
     * Write your code here.
     */

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int arr_count;
        cin >> arr_count;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string arr_temp_temp;
        getline(cin, arr_temp_temp);

        vector<string> arr_temp = split_string(arr_temp_temp);

        vector<int> arr(arr_count);

        for (int arr_itr = 0; arr_itr < arr_count; arr_itr++) {
            int arr_item = stoi(arr_temp[arr_itr]);

            arr[arr_itr] = arr_item;
        }

        int result = arraySplitting(arr);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
