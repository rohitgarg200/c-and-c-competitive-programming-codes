#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the boardCutting function below.
int boardCutting(vector<int> y, vector<int> x) {
    sort(y.rbegin(),y.rend());
    sort(x.rbegin(),x.rend());
    long int h=1;
    long int v=1;
    long int first=0;
    long long int cost=0;
    long int second=0;
    long int index1=0,index2=0;
    while(first<y.size() && second<x.size()){
        if(y[index1]>=x[index2] ){
            if(y[index1]==x[index2] && h<v)
            {cost=cost+(y[index1]*h);
           // cost=cost%(1000000007);
            v++;
            cout<<cost<<endl;
            first++;
            index1++;
            }
            else if(y[index1]==x[index2]){cost=cost+(x[index2]*v);
            h++;
            cout<<cost<<endl;
            second++;
            index2++;
//            cost=cost%(1000000007);

            }
            else{
                cost=cost+(y[index1]*h);
            v++;
            cout<<cost<<endl;//cost=cost%(1000000007);
            first++;
            index1++;
  

            }

        }else{
            cost=cost+(x[index2]*v);
            h++;
           // cost=cost%(1000000007);
            cout<<cost<<endl;
            second++;
            index2++;
        }

    }
    cout<<" hello"<<endl;
    cout<<index1<<endl;
    cout<<index2<<endl<<endl;
        for(long int i=index1;i<y.size();i++){
        cost=cost+(y[i]*h);
        cout<<cost<<endl<<"vertical"<<endl;
        v++;
        }
//    }
  //  if(second==x.size()){
        for(long int i=index2;i<x.size();i++){
            cost=cost+(x[i]*v);
            h++;
            cout<<cost<<endl<<"horizontal"<<endl;
        }
    //}

long k=pow(10,9)+7;
cost=cost%k;
return cost;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string mn_temp;
        getline(cin, mn_temp);

        vector<string> mn = split_string(mn_temp);

        int m = stoi(mn[0]);

        int n = stoi(mn[1]);

        string cost_y_temp_temp;
        getline(cin, cost_y_temp_temp);

        vector<string> cost_y_temp = split_string(cost_y_temp_temp);

        vector<int> cost_y(m-1);

        for (int i = 0; i < m-1; i++) {
            int cost_y_item = stoi(cost_y_temp[i]);

            cost_y[i] = cost_y_item;
        }

        string cost_x_temp_temp;
        getline(cin, cost_x_temp_temp);

        vector<string> cost_x_temp = split_string(cost_x_temp_temp);

        vector<int> cost_x(n-1);

        for (int i = 0; i < n-1; i++) {
            int cost_x_item = stoi(cost_x_temp[i]);

            cost_x[i] = cost_x_item;
        }

        int result = boardCutting(cost_y, cost_x);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
