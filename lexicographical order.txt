#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

// Complete the biggerIsGreater function below.

// Please either make the string static or allocate on the heap. For example,
// static char str[] = "hello world";
// return str;
//
// OR
//
// char* str = "hello world";
// return str;
//
char* biggerIsGreater(char* w) {
    char* ret;
    /*int j=0;
    for(int i=0;i<strlen(w);i++){
        ret[i]=w[i];
        j=i+1;
    }

    ret[j]='\0';*/
    int k=strlen(w);
    int t=k;
    char q;
    int z=0;
    if(w[t]>w[t-1] && t>=0){
        char q;
        q=w[t];
        w[t]=w[t-1];
        w[t-1]=q;
    
     return w;
    }
    int r = t-1 ;
    while(r>0)
    { 
    if (w[r] > w[r - 1] && r >= 0)
     {
         z++;
      char q = w[r];
      int index=r;
          for(int i=r+1;i<k;i++)
          {
              if(q>w[i] && w[i]>w[r-1])
              {
              q=w[i];
              index=i;
              }
          }
          q=w[r-1];
          w[r-1]=w[index];
          w[index]=q;
        
          for (int i = r; i <k-1; i++)
           {
              for(int j=i+1;j<k;j++)
              {
                if (w[i] > w[j])
                 {
                    q = w[i];
                     w[i]=w[j];
                     w[j]=q;
                 }
             }
           }
           /*for(int i=0;i<((k-r)/2);i++){
               char q=w[r+i];
               w[r+i]=w[k-i-1];
               w[k-i-1]=q;
           }*/
           r=-1;
     }
     r--;
     }
        int count=0;
     for(int i=0;i<strlen(w);i++){
    
     
    if(ret[i]!=w[i])
    {
        count++;
        
    }

     }
     if(z==0){
       w = "no answer";
     }
    return w;
    }
    


int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* T_endptr;
    char* T_str = readline();
    int T = strtol(T_str, &T_endptr, 10);

    if (T_endptr == T_str || *T_endptr != '\0') { exit(EXIT_FAILURE); }

    for (int T_itr = 0; T_itr < T; T_itr++) {
        char* w = readline();

        char* result = biggerIsGreater(w);

        fprintf(fptr, "%s\n", result);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
