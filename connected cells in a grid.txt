#include <bits/stdc++.h>

using namespace std;

int find(vector<vector<int>>&matrix,int i,int j){
    if(i>=matrix.size() || j>=matrix[0].size() || i<=-1 || j<=-1){
        return 0;
    }
    if(matrix[i][j]==1){
        matrix[i][j]=2;
        return (1+find(matrix,i+1,j)+
        find(matrix,i,j+1)+
        find(matrix,i-1,j)+
        find(matrix,i,j-1)+
        find(matrix,i+1,j+1)+
        find(matrix,i-1,j-1)+
        find(matrix,i-1,j+1)+
        find(matrix,i+1,j-1));
    }
    return 0;

}

// Complete the connectedCell function below.
int connectedCell(vector<vector<int>> matrix) {
    int count=0;
    int large=0;
    for(int i=0;i<matrix.size();i++){
        for(int j=0;j<matrix[0].size();j++){
            if(matrix[i][j]==1){
                count=find(matrix,i,j);
                if(large<count){
                    large=count;
                }
            }
        }
    }

return large;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> matrix(n);
    for (int i = 0; i < n; i++) {
        matrix[i].resize(m);

        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = connectedCell(matrix);

    fout << result << "\n";

    fout.close();

    return 0;
}
