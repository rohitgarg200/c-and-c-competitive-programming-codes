#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the absolutePermutation function below.
vector<int> absolutePermutation(int n, int k) {
    vector<int> a(n,0);
    vector<int> a1(1,-1);
    if(n<2*k){
        return a1;
    }
    int i=0;
    
    while(i!=n){
        int j=n+1;
        if((-k+i+1)>0 && (-k+i+1)<=n && a[(-k+i+1)-1]==0){
            j=min(j,(-k+i+1));
        }
        if((i+1+k)>0 && (k+i+1)<=n && a[(k+i+1)-1]==0){
            j=min(j,(k+i+1));
        }

        
      if(j>0 && j<=n)
{        a[j-1]=i+1;
 //       cout<<a[j-1]<<" "<<i+1<<endl; 
}

        i++;
    }
    i=0;
    while(i!=n){
        if(a[i]<=0 || a[i]>n){
            a1[0]=-1;
            return a1; 
        }
        i++;
    }
return a;


}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string nk_temp;
        getline(cin, nk_temp);

        vector<string> nk = split_string(nk_temp);

        int n = stoi(nk[0]);

        int k = stoi(nk[1]);

        vector<int> result = absolutePermutation(n, k);

        for (int i = 0; i < result.size(); i++) {
            fout << result[i];

            if (i != result.size() - 1) {
                fout << " ";
            }
        }

        fout << "\n";
    }

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
